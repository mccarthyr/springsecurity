<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

  <!-- V1 & V2 configuration...
	<http>
		<intercept-url pattern="/**"
			access="hasAnyRole('ROLE_ATHLETE', 'ROLE_ADMIN')" />
		<form-login />
		<logout />
		<remember-me />
		<headers>
			<cache-control />
			<xss-protection />
		</headers>
	</http>
	-->

	<!-- V1 & V2 Configuration...
		Spring Security's AuthenticationManager is responsible for processing the authentication request.
		An AuthenticationManager is configured with one or more AuthenticationProviders, which are used by 
		the AuthenticationManager to authenticate against.
	
		The security schema (used below) simplifies configuration of the AuthenticationManger and 
		AuthenticationProvider objects.
	
		By default, the <authentication-provider> element configures a DaoAuthenticationProvider that uses
		Spring's UserDetailsService as a DAO to load user details.
		DaoAuthenticationProvider uses the configured UserDetailsService to load user details from the user
		repository based on the supplied username.
		The <user-service> element below provides an in-memory UserDetailsService that loads users defined
		by the <user> elements.
	
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="adminpass" authorities="ROLE_ADMIN" />
				<user name="athlete1" password="pass1" authorities="ROLE_ATHLETE, ROLE_ADMIN" />
				<user name="athlete2" password="pass2" authorities="ROLE_ATHLETE" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
  

	<global-method-security secured-annotations="enabled" />
	-->

	<!-- V3 Configuration ... -->


 	<authentication-manager>
 		<authentication-provider user-service-ref="userDetailsService" />
 	</authentication-manager>

 	<beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl" >
 		<beans:property name="dataSource" ref="dataSource" />
  </beans:bean>

<!-- 
			<intercept-url pattern="/login" access="permitAll" />

/athleteaccountv2/athleteAccount/*

<form-login login-page="/athleteaccountv2/login"

login-page="/athleteaccountv2/login"  THIS GOES TO MY LOGIN CONTROLLER AS BETWEEN THE POM AND WEB XML FILES, THE helloSpringSecurity and athleteaccountv2 IS ADDED
IF THIS WAS NOT USED THE THE DEFAULT GOES TO helloSpringSecurity/login  - THE CUSTOM ONE ABOVE WORKS AS THE CUSTOM LOGIN CONTROLLER HAS A REQUEST MAPPING ANNOTATION OF
/login which will get the rest (helloSpringSecurity/athleteaccountv2) put in front of it. 
EVERY URL LISTED HERE WILL HAVE /helloSpringSecurity/ PUT IN FRONT OF IT (set in the POM file, the TOMCAT context)...

-->




	<http use-expressions="true">
		<access-denied-handler error-page="/athleteaccountv2/access-denied" />
		<intercept-url pattern="/athleteaccountv2/login" access="permitAll" /> <!-- NEED THIS OR ELSE END UP IN INFINTTE REDIRECT LOOP... -->
		<intercept-url pattern="/**" access="hasAnyRole('ROLE_ATHLETE', 'ROLE_ADMIN')" />
		<form-login  login-page="/athleteaccountv2/login" authentication-failure-handler-ref="authFailureHandler" default-target-url="/athleteaccountv2/homepage.html" />
		<logout logout-url="/athleteaccountv2/logout" />  
		<headers>
			<cache-control />
			<xss-protection />
		</headers>
	</http>

	<beans:bean id="authFailureHandler" class="com.fireduptech.springsecurity.security.MyAuthFailureHandler" />


	<global-method-security pre-post-annotations="enabled" >
		<expression-handler ref="expressionHandler" />
	</global-method-security>


	<beans:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler" >
		<beans:property name="permissionEvaluator" ref="permissionEvaluator" />
		<beans:property name="permissionCacheOptimizer" >
			<beans:bean class="org.springframework.security.acls.AclPermissionCacheOptimizer" >
				<beans:constructor-arg ref="aclService" />
			</beans:bean>
		</beans:property>
	</beans:bean>


	<beans:bean id="permissionEvaluator" class="org.springframework.security.acls.AclPermissionEvaluator" >
		<beans:constructor-arg ref="aclService" />
	</beans:bean>



	<beans:bean id="aclCache" class="org.springframework.security.acls.domain.EhCacheBasedAclCache" >
		<beans:constructor-arg>
 

			<beans:bean class="org.springframework.cache.ehcache.EhCacheFactoryBean" >

				<beans:property name="cacheManager">
					<beans:bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
				</beans:property>

				<beans:property name="cacheName" value="aclCache" />

			</beans:bean>

		</beans:constructor-arg>
		<beans:constructor-arg ref="aclAuthorizationStrategy" />
		<beans:constructor-arg ref="permissionGrantingStrategy" />	
	</beans:bean>



	<beans:bean id="lookupStrategy" class="org.springframework.security.acls.jdbc.BasicLookupStrategy" >
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="aclCache" />
		<beans:constructor-arg ref="aclAuthorizationStrategy" />
		<beans:constructor-arg ref="permissionGrantingStrategy" />
	</beans:bean>


	<beans:bean id="aclAuthorizationStrategy" class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl" >
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.core.authority.SimpleGrantedAuthority" >
				<beans:constructor-arg value="ROLE_ADMIN" />
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="permissionGrantingStrategy" class="org.springframework.security.acls.domain.DefaultPermissionGrantingStrategy" >
		<beans:constructor-arg>
			<beans:bean class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
		</beans:constructor-arg>
	</beans:bean>

	<!--
		As ACL permissions are stored in database tables, the application uses Spring's
		JsbcMutableAclService to perform CRUD operations on ACLs in the tables.
	-->	
	<beans:bean id="aclService" class="org.springframework.security.acls.jdbc.JdbcMutableAclService" >
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="lookupStrategy" />
		<beans:constructor-arg ref="aclCache" />
	</beans:bean>


</beans:beans>
